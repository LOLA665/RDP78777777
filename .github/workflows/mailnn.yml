name: RDP Gaming Server - 22 FPS ULTIMATE TARGET (640x480) + Win 11 Look

on:
  workflow_dispatch:

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  RUNNERADMIN_PASS: ${{ secrets.RUNNERADMIN_PASS }}
  KEEPALIVE_ITER: 432
  RUNNERADMIN_USER: runneradmin
  SOFTWARE_GPU_DIR: C:\SoftwareGPU_Emulators

jobs:
  rdp-gaming:
    runs-on: windows-2022
    timeout-minutes: 4320

    steps:
      - name: Checkout code
        uses: "actions/checkout@v4"

      # --- Setup Bazic și VCRedist ---
      - name: Setup User, RDP & VCRedist
        shell: pwsh
        run: |
          $user = $env:RUNNERADMIN_USER; $pass = $env:RUNNERADMIN_PASS
          $isValid = $false
          if (-not [string]::IsNullOrWhiteSpace($pass)) {
            if ($pass.Length -ge 8 -and $pass -match '[A-Z]' -and $pass -match '[a-z]' -and $pass -match '\d' -and $pass -match '[^a-zA-Z0-9]') { $isValid = $true }
          }
          if (-not $isValid) { $pass = "Runner@" + (Get-Random -Minimum 10000 -Maximum 99999) }
          
          if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) { net user $user $pass /add | Out-Null; net localgroup administrators $user /add | Out-Null } 
          else { net user $user $pass | Out-Null }
          Add-Content -Path $env:GITHUB_ENV -Value ("RUNNERADMIN_USER={0}" -f $user)
          Add-Content -Path $env:GITHUB_ENV -Value ("RUNNERADMIN_PASS={0}" -f $pass)

          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force | Out-Null
          Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' -ErrorAction SilentlyContinue | Out-Null

          $t = $env:TEMP
          try { Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x64.exe' -OutFile (Join-Path $t 'vc_redist.x64.exe') -ErrorAction Stop; Start-Process (Join-Path $t 'vc_redist.x64.exe') -ArgumentList '/install','/quiet','/norestart' -Wait } catch {}

      # --- AESTHETICS: Windows 11 Look ---
      - name: Set Custom Wallpaper & Dark Mode
        shell: pwsh
        run: |
          $WallDir = "$env:USERPROFILE\Pictures\Wallpapers"
          New-Item -Path $WallDir -ItemType Directory -Force | Out-Null
          $WallPath = Join-Path $WallDir "CustomCarBackground.jpg"
          
          # Descarcă un wallpaper frumos cu mașini (Link Placeholder)
          $WallURL = "https://picsum.photos/800/600/?blur=2" 
          try { Invoke-WebRequest -Uri $WallURL -OutFile $WallPath -ErrorAction Stop } catch { Write-Warning "Eroare la descărcarea wallpaper-ului." }
          
          # Setează fundalul desktopului 
          $code = @'
              param([string]$path)
              Add-Type -AssemblyName System.Windows.Forms
              [System.Windows.Forms.SystemParameters]::[System.Windows.Forms.SystemParameters]::SystemInformation.SetWallpaper($path, 0)
          '@
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          & { $ExecutionContext.InvokeCommand.NewScriptBlock($code).Invoke($WallPath) }
          Write-Host "Wallpaper-ul cu mașini a fost setat!"
          
          # Setează tema pe Dark Mode (pentru aspectul Win 11 modern)
          $RegPath = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize'
          Set-ItemProperty -Path $RegPath -Name 'AppsUseLightTheme' -Type DWord -Value 0 -Force
          Set-ItemProperty -Path $RegPath -Name 'SystemUsesLightTheme' -Type DWord -Value 0 -Force
          Write-Host "Dark Mode activat."
          
          # Descarcă ExplorerPatcher (pentru Taskbar centrat și meniu Win 11)
          # NOTĂ: Utilizatorul trebuie să ruleze manual acest installer după conectare!
          $EPPath = Join-Path $env:USERPROFILE "Desktop\ExplorerPatcherSetup.exe"
          $EPUrl = "https://github.com/valinet/ExplorerPatcher/releases/latest/download/ep_setup.exe"
          try { Invoke-WebRequest -Uri $EPUrl -OutFile $EPPath -ErrorAction Stop; Write-Host "ExplorerPatcher descărcat pe Desktop." } catch {}

      # --- Emulare Software (SwiftShader) ---
      - name: Install SwiftShader (Software GPU)
        shell: pwsh
        continue-on-error: true
        run: |
          $t = Join-Path $env:TEMP "swiftshader"
          New-Item -Path $t -ItemType Directory -Force | Out-Null
          $zip = Join-Path $env:TEMP "SwiftShader-Release.zip"
          try {
            Invoke-WebRequest 'https://github.com/google/swiftshader/releases/latest/download/SwiftShader-Release.zip' -OutFile $zip -ErrorAction Stop
            Expand-Archive -Path $zip -DestinationPath $t -Force
            New-Item -Path $env:SOFTWARE_GPU_DIR -ItemType Directory -Force | Out-Null
            Get-ChildItem -Path $t -Filter "*.dll" -Recurse | Where-Object { $_.Name -match "^(d3d|dxgi|vk_|opengl32)" } | ForEach-Object { Copy-Item -Path $_.FullName -Destination $env:SOFTWARE_GPU_DIR -Force }
            Write-Host "SwiftShader files injected."
          } catch { Write-Warning "SwiftShader install failed." }

      # --- Optimizare CPU & Sistem ---
      - name: Max CPU and System Optimizations
        shell: pwsh
        continue-on-error: true
        run: |
          # Prioritate minimă pe vizual: dă performanță maximă jocului
          try { reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f } catch {}

      # --- Lansare Joc: Rezoluție Forțată MINIMALĂ (640x480) + Prioritate Realtime ---
      - name: Launch Games with Max CPU Priority and Forced Minimal Resolution
        shell: pwsh
        run: |
          $mscPath = "C:\Program Files (x86)\Steam\steamapps\common\My Summer Car\MySummerCar.exe"
          $gtaPath = "C:\Program Files\Rockstar Games\GTA V\GTA5.exe"
          
          if (Test-Path $env:SOFTWARE_GPU_DIR) {
            foreach ($gamePath in @($mscPath, $gtaPath)) {
              if (Test-Path $gamePath) {
                Get-ChildItem -Path $env:SOFTWARE_GPU_DIR -Filter "*.dll" | ForEach-Object {
                  try { Copy-Item -Path $_.FullName -Destination (Split-Path $gamePath) -Force -ErrorAction SilentlyContinue } catch {}
                }
              }
            }
          }
          
          function Launch-Game ([string]$path, [string]$name, [string]$args) {
            if (Test-Path $path) {
              $proc = Start-Process -FilePath $path -ArgumentList $args -PassThru -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              try { $proc.PriorityClass = "Realtime"; Write-Host "Prioritate Realtime setată." } 
              catch { Write-Warning "Prioritatea Realtime a eșuat. Privilegii." }
              try { $proc.ProcessorAffinity = [System.IntPtr]::op_Explicit(0xFFFFFFFF); Write-Host "Afinat pe toate nucleele." } catch {}
            } else { Write-Warning "$name nu a fost găsit." }
          }
          
          # *** Modificarea cheie: Forțează rezoluția MINIMALĂ 640x480 pentru 22 FPS ***
          Launch-Game $gtaPath "GTA5" "-safemode -width 640 -height 480"
          
          Launch-Game $mscPath "My Summer Car" ""

      # --- Acces la Distanță (Tailscale) ---
      - name: Install & Start Tailscale
        shell: pwsh
        continue-on-error: true
        run: |
          if (-not [string]::IsNullOrWhiteSpace($env:TAILSCALE_AUTH_KEY)) {
            $msi = Join-Path $env:TEMP "tailscale.msi"
            Invoke-WebRequest 'https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi' -OutFile $msi -ErrorAction Stop
            Start-Process msiexec.exe -ArgumentList @('/i',$msi,'/quiet','/norestart') -Wait -NoNewWindow
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey $env:TAILSCALE_AUTH_KEY --hostname "gh-gaming-$($env:GITHUB_RUN_ID)" --accept-routes
            Write-Host "Tailscale activat."
          }

      - name: Show connection info
        shell: pwsh
        run: |
          Write-Host "--------------------------------------------------------"
          Write-Host "             Server RDP Gaming Information              "
          Write-Host "--------------------------------------------------------"
          Write-Host ("User: {0}" -f $env:RUNNERADMIN_USER)
          Write-Host ("Password: {0}" -f $env:RUNNERADMIN_PASS)
          $ip = ""
          if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
            try { $ip = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Select-Object -First 1).Trim() } catch {}
          }
          if ([string]::IsNullOrWhiteSpace($ip)) {
            try { $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike "Loopback*"} | Select-Object -First 1).IPAddress } catch {}
          }
          Write-Host ("IP: {0}" -f ($ip -ne $null ? $ip : "(unavailable)"))
          Write-Host "--------------------------------------------------------"
          Write-Host "PERFORMANȚĂ: Țintă 22 FPS (Rezoluție 640x480). SETEAZĂ MANUAL opțiunile de grafică la **MINIM/OFF**."
          Write-Host "ASPECT W11: Rulează **ExplorerPatcherSetup.exe** de pe Desktop după conectare pentru Taskbar-ul centrat!"
          Write-Host "--------------------------------------------------------"
          
      - name: Keepalive loop
        shell: pwsh
        run: |
          $iters = [int]${{ env.KEEPALIVE_ITER }}
          for ($i=0; $i -lt $iters; $i++) {
            Write-Host ("Keepalive {0}/{1} la {2}" -f $i, $iters, (Get-Date))
            Start-Sleep -Seconds 600
          }
